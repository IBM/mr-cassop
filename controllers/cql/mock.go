// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/cql/cql.go

// Package cql is a generated GoMock package.
package cql

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/ibm/cassandra-operator/api/v1alpha1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetKeyspacesInfo mocks base method
func (m *MockClient) GetKeyspacesInfo() ([]Keyspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspacesInfo")
	ret0, _ := ret[0].([]Keyspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspacesInfo indicates an expected call of GetKeyspacesInfo
func (mr *MockClientMockRecorder) GetKeyspacesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspacesInfo", reflect.TypeOf((*MockClient)(nil).GetKeyspacesInfo))
}

// UpdateRF mocks base method
func (m *MockClient) UpdateRF(cc *v1alpha1.CassandraCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRF", cc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRF indicates an expected call of UpdateRF
func (mr *MockClientMockRecorder) UpdateRF(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRF", reflect.TypeOf((*MockClient)(nil).UpdateRF), cc)
}

// GetUsers mocks base method
func (m *MockClient) GetUsers() ([]CassandraUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]CassandraUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockClientMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers))
}

// Query mocks base method
func (m *MockClient) Query(stmt string, values ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stmt}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockClientMockRecorder) Query(stmt interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stmt}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), varargs...)
}
