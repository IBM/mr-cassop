// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/cql/cql.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/ibm/cassandra-operator/api/v1alpha1"
	cql "github.com/ibm/cassandra-operator/controllers/cql"
	reflect "reflect"
)

// MockCqlClient is a mock of CqlClient interface
type MockCqlClient struct {
	ctrl     *gomock.Controller
	recorder *MockCqlClientMockRecorder
}

// MockCqlClientMockRecorder is the mock recorder for MockCqlClient
type MockCqlClientMockRecorder struct {
	mock *MockCqlClient
}

// NewMockCqlClient creates a new mock instance
func NewMockCqlClient(ctrl *gomock.Controller) *MockCqlClient {
	mock := &MockCqlClient{ctrl: ctrl}
	mock.recorder = &MockCqlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCqlClient) EXPECT() *MockCqlClientMockRecorder {
	return m.recorder
}

// GetKeyspacesInfo mocks base method
func (m *MockCqlClient) GetKeyspacesInfo() ([]cql.Keyspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspacesInfo")
	ret0, _ := ret[0].([]cql.Keyspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspacesInfo indicates an expected call of GetKeyspacesInfo
func (mr *MockCqlClientMockRecorder) GetKeyspacesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspacesInfo", reflect.TypeOf((*MockCqlClient)(nil).GetKeyspacesInfo))
}

// UpdateRF mocks base method
func (m *MockCqlClient) UpdateRF(cc *v1alpha1.CassandraCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRF", cc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRF indicates an expected call of UpdateRF
func (mr *MockCqlClientMockRecorder) UpdateRF(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRF", reflect.TypeOf((*MockCqlClient)(nil).UpdateRF), cc)
}

// GetUsers mocks base method
func (m *MockCqlClient) GetUsers() ([]cql.CassandraUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]cql.CassandraUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockCqlClientMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCqlClient)(nil).GetUsers))
}

// Query mocks base method
func (m *MockCqlClient) Query(stmt string, values ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stmt}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockCqlClientMockRecorder) Query(stmt interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stmt}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCqlClient)(nil).Query), varargs...)
}
