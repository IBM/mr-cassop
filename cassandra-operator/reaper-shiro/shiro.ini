[main]
;authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
;authc.loginUrl = /webui/login.html

# Java Web Token authentication for REST endpoints
jwtv = io.cassandrareaper.resources.auth.ShiroJwtVerifyingFilter
;rest = io.cassandrareaper.resources.auth.RestPermissionsFilter

# Example LDAP realm, see https://shiro.apache.org/static/1.2.4/apidocs/org/apache/shiro/realm/ldap/JndiLdapContextFactory.html
;ldapRealm = org.apache.shiro.realm.ldap.JndiLdapRealm
;ldapRealm.userDnTemplate = uid={0},ou=users,dc=cassandra-reaper,dc=io
;ldapRealm.contextFactory.url = ldap://ldapHost:389
;ldapRealm.contextFactory.authenticationMechanism = DIGEST-MD5
;ldapRealm.contextFactory.systemUsername = cn=Manager, dc=example, dc=com
;ldapRealm.contextFactory.systemPassword = secret
;ldapRealm.contextFactory.environment[java.naming.security.credentials] = ldap_password

[roles]
operator = *
user = *:read

[urls]
# Web UI requires manual authentication and session cookie
/webui/ = anon
/webui = anon
/jwt = anon
/webui/*.html* = anon

# login page and all js and css resources do not require authentication
/webui/login.html = anon
/webui/** = anon
/ping = anon
/login = anon


# REST endpoints require a Java Web Token and uses the HttpMethodPermissionFilter for http method level permissions
;/cluster/** = noSessionCreation,jwtv,rest[cluster]
;/repair_schedule/** = noSessionCreation,jwtv,rest[repair_schedule]
;/repair_run/** = noSessionCreation,jwtv,rest[repair_run]
;/snapshot/** = noSessionCreation,jwtv,rest[snapshot]
;/** = noSessionCreation,jwtv


#  custom authentication will be appended
[users]
